{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","toDo","id","value","inputValue","addItem","nval","nid","newItem","push","setState","console","log","alert","updateInputValue","evt","target","className","algin","class","onChange","this","onClick","map","i","key","onDelete","temp","filter","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2KAgFeA,E,4MA7EdC,MAAQ,CACPC,KAAM,CACL,CAAEC,GAAI,EAAGC,MAAO,cAChB,CAAED,GAAI,EAAGC,MAAO,qBAEjBD,GAAG,EACHE,WAAW,I,EAiCZC,QAAQ,WAEP,GAA2B,KAAxB,EAAKL,MAAMI,WACd,CAGD,IAAIE,EAAK,EAAKN,MAAMI,WAChBG,EAAI,EAAKP,MAAME,GAAG,EAClBD,EAAK,EAAKD,MAAMC,KACdO,EAAQ,CACbN,GAAGK,EACHJ,MAAMG,GAEPL,EAAKQ,KAAKD,GACV,EAAKE,SAAS,CACbT,KAAKA,EACLC,GAAGK,EACHH,WAAW,KAGZO,QAAQC,IAAI,EAAKZ,MAAMC,KAAK,EAAKD,MAAME,SAKpCW,MAAM,mB,EAGTC,iBAAiB,SAACC,GACjB,EAAKL,SAAS,CACZN,WAAYW,EAAIC,OAAOb,S,uDA7DhB,IAAD,OACR,OAEC,wBAAIc,UAAU,2BACb,yBAAKC,MAAM,UACV,2BAAOC,MAAM,eAAeC,SAAUC,KAAKP,mBAC3C,4BAAQG,UAAU,mBAClBK,QAASD,KAAKhB,SADd,OAGCgB,KAAKrB,MAAMC,KAAKsB,KAAI,SAACC,GAAD,OACpB,yBAAMC,IAAKD,EAAEtB,GAAIA,GAAIsB,EAAEtB,IAEvB,4BAAKsB,EAAErB,OACP,4BAAQc,UAAU,qBAClBK,QAAS,kBAAI,EAAKI,SAASF,EAAEtB,MAD7B,kB,+BAYKA,GAET,IAAIyB,EAAKN,KAAKrB,MAAMC,KAAK2B,QAAO,SAAAJ,GAAC,OAAEA,EAAEtB,KAAKA,KAC1CS,QAAQC,IAAIe,GACZN,KAAKX,SAAS,CAACT,KAAK0B,Q,GAtCJE,aCUZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,YAI1BrC,QAAQC,IACN,iHAKE0B,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBhC,QAAQC,IAAI,sCAGR0B,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLzC,QAAQyC,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,aAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,aAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLxC,QAAQC,IACN,oEAvFA4D,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC/B,QAAQC,IACN,iHAMJwB,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.f61afc9b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./index.css\";\nclass App extends Component {\n\tstate = {\n\t\ttoDo: [\n\t\t\t{ id: 1, value: \"Clean Room\" },\n\t\t\t{ id: 2, value: \"Clean Other Room\" },\n\t\t],\n\t\tid:2,\n\t\tinputValue:''\n\t};\n\trender() {\n\t\treturn (\n\t\t\t\n\t\t\t<h1 className=\"badge badge-primary m-2\">\n\t\t\t\t<div algin='center'>\n\t\t\t\t\t<input class=\"form-control\" onChange={this.updateInputValue}></input>\n\t\t\t\t\t<button className='btn btn-dark m-2'\n\t\t\t\t\tonClick={this.addItem}\n\t\t\t\t\t>ADD</button>\n\t\t\t\t\t{this.state.toDo.map((i) => (\n\t\t\t\t\t\t<div  key={i.id} id={i.id}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<h1>{i.value}</h1>\n\t\t\t\t\t\t<button className='btn btn-danger m-2'\n\t\t\t\t\t\tonClick={()=>this.onDelete(i.id)}\n\t\t\t\t\t\t\n\t\t\t\t\t\t>Delete</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</h1>\n\t\t);\n\n\n\t}\n\t onDelete(id)\n\t{\n\t\tlet temp=this.state.toDo.filter(i=>i.id!==id);\n\t\tconsole.log(temp)\n\t\tthis.setState({toDo:temp})\n\t}\n\taddItem=()=>\n\t{\n\t\tif(this.state.inputValue!=='')\n\t\t{\n\n\t\t\n\tlet nval=this.state.inputValue\n\tlet nid=this.state.id+1;\n\tlet toDo=this.state.toDo\n\tconst newItem={\n\t\tid:nid,\n\t\tvalue:nval\n\t}\n\ttoDo.push(newItem)\n\tthis.setState({\n\t\ttoDo:toDo,\n\t\tid:nid,\n\t\tinputValue:''\n\t\t\n\t})\n\tconsole.log(this.state.toDo,this.state.id)\n\t\t}\n\t\telse\n\t\t{\n  \n\t\t  alert('Input is Empty')\n\t\t}\n\t}\n\tupdateInputValue=(evt)=>{\n\t\tthis.setState({\n\t\t  inputValue: evt.target.value\n\t\t});\n\t  }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}